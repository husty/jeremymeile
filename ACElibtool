#!/bin/bash
# Colors
ESC_SEQ="\x1b["
COL_RESET=$ESC_SEQ"39;49;00m"
COL_RED=$ESC_SEQ"31;01m"
COL_GREEN=$ESC_SEQ"32;01m"
COL_YELLOW=$ESC_SEQ"33;01m"
COL_BLUE=$ESC_SEQ"34;01m"
COL_MAGENTA=$ESC_SEQ"35;01m"
COL_CYAN=$ESC_SEQ"36;01m"
COL_GRAY=$ESC_SEQ"30;01m"
COL_WHITE=$ESC_SEQ"37;01m"
get_path(){
echo -e 'Welcome to '$COL_BLUE'[ACEtool] '$COL_RESET' ...'
while true
do
	echo -ne $COL_GREEN'Enter install path: '$COL_RESET
	read -p '' prefix
		if sudo test -d $prefix; then
			prefix=$prefix'/ace'
			echo -e 'Installing ACE in: '$prefix
			break
		else
			echo -e 'Path does not exists'
			continue
		fi
done
}
echo
echo -e '#############################################'
echo -e '| JEREMYMEILE.CH                            |'
echo -e '|                                           |'
echo -e '| ACE lib builder   '$COL_BLUE'[ACEtool]'$COL_RESET'               |'
echo -e '#############################################'
echo
if
	sudo -v
then
	echo
else
	exit
fi
cd /usr/local
echo -ne $COL_BLUE'[ACEtool] '$COL_RESET'Checking source ...'
if
	test -f ~/Downloads/ACE-6.2.1.tar.gz > /dev/null 2>/tmp/TDBtool_errorMSG
then
	if [ `echo $(md5 -q ~/Downloads/ACE-6.2.1.tar.gz)` != "119a8b1310c6dd817a674a0c2f9679e8" ]
	then
		echo -e $COL_RED' Not found'$COL_RESET
		echo -ne $COL_BLUE'[ACEtool] '$COL_RESET'Getting source ...'
		cd ~/Downloads
		sudo rm -d -f -r ACE-6.2.1.tar.gz > /dev/null 2>/tmp/TDBtool_errorMSG
		if
			curl -O -s http://download.dre.vanderbilt.edu/previous_versions/ACE-6.2.1.tar.gz > /dev/null 2>/tmp/TDBtool_errorMSG
		then
			echo -e $COL_GREEN' OK'$COL_RESET
		else
			echo -e $COL_RED' error'$COL_RESET
			echo -e $COL_RED'    error '$COL_WHITE$(/bin/cat /tmp/TDBtool_errorMSG)$COL_RESET
			exit 1
		fi
	else
		echo -e $COL_GREEN' OK'$COL_RESET
	fi
else
	echo -e $COL_RED' Not found'$COL_RESET
	echo -ne $COL_BLUE'[ACEtool] '$COL_RESET'Getting source ...'
	cd ~/Downloads
	rm -d -f -r ACE-6.2.1.tar.gz
		if
			curl -O -s http://download.dre.vanderbilt.edu/previous_versions/ACE-6.2.1.tar.gz > /dev/null 2>/tmp/TDBtool_errorMSG
		then
			echo -e $COL_GREEN' OK'$COL_RESET
		else
			echo -e $COL_RED' error'$COL_RESET
			echo -e $COL_RED'    error '$COL_WHITE$(/bin/cat /tmp/TDBtool_errorMSG)$COL_RESET
			exit 1
		fi
fi
get_path
echo -ne $COL_BLUE'[ACEtool] '$COL_RESET'Preparing source ...'
if
	cd ~/Downloads
	sudo rm -d -f -r ~/Downloads/ACE_wrappers > /dev/null 2>/tmp/TDBtool_errorMSG
	gzcat ~/Downloads/ACE-6.2.1.tar.gz | tar -xpf -
	cd ~/Downloads/ACE_wrappers
	echo 'export ACE_ROOT=$(pwd)' > bash_profile
	echo 'export ACE_ROOT=$ACE_ROOT' >> bash_profile
	echo 'export PATH=$ACE_ROOT/bin:$PATH' >> bash_profile
	echo 'export DYLD_LIBRARY_PATH=$ACE_ROOT/lib' >> bash_profile
	source bash_profile
then
	echo -e $COL_GREEN' OK'$COL_RESET
else
	echo -e $COL_RED' error'$COL_RESET
	echo -e $COL_RED'    error '$COL_WHITE$(/bin/cat /tmp/TDBtool_errorMSG)$COL_RESET
	exit 1
fi

	if [ $(sw_vers -productVersion | cut -c 1-4) = "10.8" ]
	then
		osx="mountainlion"
	fi
	if [ $(sw_vers -productVersion | cut -c 1-4) = "10.7" ]
	then
		osx="lion"
	fi
	if [ $(sw_vers -productVersion | cut -c 1-4) = "10.6" ]
	then
		osx="snowleopard"
	fi
	if [ $(sw_vers -productVersion | cut -c 1-4) = "10.5" ]
	then
		osx="leopard"
	fi

if f=$(xcode-select --print-path)
then
echo
	echo -e $COL_GREEN'Building ACE libs with one of the following parameters:'$COL_RESET
		if test -d $f'/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk'
		then
			echo -e ' - Use MacOSX10.6.sdk, Universal [1]'
		fi
		if test -d $f'/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk'
		then
			echo -e ' - Use MacOSX10.7.sdk, Universal [2]'
		fi
		if test -d $f'/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk'
		then
			echo -e ' - Use MacOSX10.8.sdk, Universal [3]'
		fi
		echo -e ' - Default ('$osx') [4]'
		echo -ne $COL_GREEN'To continue chose and press Enter. '$COL_RESET
else
	echo -e 'Install and initialize XCode first!'
	exit 1
fi

	while true; do
		read -p '' yn
		case $yn in
		[1]* )	export MACOSX_DEPLOYMENT_TARGET=10.6
			export DEPLOYMENT_TARGET=10.6
			export OSX_SDK="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk"
			export OSX_SYSROOT="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk"
			export MACOSX_SYSROOT="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk"
			export CFLAGS="-mmacosx-version-min=10.6 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk -arch i386 -arch x86_64"
			export CCFLAGS="-arch i386 -arch x86_64"
			export CXXFLAGS="-mmacosx-version-min=10.6 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk -arch i386 -arch x86_64"
			export LDFLAGS="-arch i386 -arch x86_64"
			echo '#include "ace/config-macosx-snowleopard.h"' > ./ace/config.h
			echo 'debug = 0' > ./include/makeinclude/platform_macros.GNU
			echo 'shared_libs = 1' >> ./include/makeinclude/platform_macros.GNU
			echo 'static_libs = 0' >> ./include/makeinclude/platform_macros.GNU
			echo 'install_rpath = 0' >> ./include/makeinclude/platform_macros.GNU
			echo 'include ${ACE_ROOT}/include/makeinclude/platform_macosx_snowleopard.GNU' >> ./include/makeinclude/platform_macros.GNU
			echo 'INSTALL_PREFIX = '$prefix >> ./include/makeinclude/platform_macros.GNU
			break ;;
		[2]* ) 
			export MACOSX_DEPLOYMENT_TARGET=10.7
			export DEPLOYMENT_TARGET=10.7
			export OSX_SDK="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk"
			export OSX_SYSROOT="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk"
			export MACOSX_SYSROOT="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk"
			export CFLAGS="-mmacosx-version-min=10.7 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk -arch i386 -arch x86_64"
			export CCFLAGS="-arch i386 -arch x86_64"
			export CXXFLAGS="-mmacosx-version-min=10.7 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk -arch i386 -arch x86_64"
			export LDFLAGS="-arch i386 -arch x86_64"
			echo '#include "ace/config-macosx-lion.h"' > ./ace/config.h
			echo 'debug = 0' > ./include/makeinclude/platform_macros.GNU
			echo 'shared_libs = 1' >> ./include/makeinclude/platform_macros.GNU
			echo 'static_libs = 0' >> ./include/makeinclude/platform_macros.GNU
			echo 'install_rpath = 0' >> ./include/makeinclude/platform_macros.GNU
			echo 'include ${ACE_ROOT}/include/makeinclude/platform_macosx_lion.GNU' >> ./include/makeinclude/platform_macros.GNU
			echo 'INSTALL_PREFIX = '$prefix >> ./include/makeinclude/platform_macros.GNU
			break ;;
		[3]* ) 
			export MACOSX_DEPLOYMENT_TARGET=10.8
			export DEPLOYMENT_TARGET=10.8
			export OSX_SDK="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk"
			export OSX_SYSROOT="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk"
			export MACOSX_SYSROOT="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk"
			export CFLAGS="-mmacosx-version-min=10.8 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -arch i386 -arch x86_64"
			export CCFLAGS="-arch i386 -arch x86_64"
			export CXXFLAGS="-mmacosx-version-min=10.8 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk -arch i386 -arch x86_64"
			export LDFLAGS="-arch i386 -arch x86_64"
			echo '#include "ace/config-macosx-mountainlion.h"' > ./ace/config.h
			echo 'debug = 0' > ./include/makeinclude/platform_macros.GNU
			echo 'shared_libs = 1' >> ./include/makeinclude/platform_macros.GNU
			echo 'static_libs = 0' >> ./include/makeinclude/platform_macros.GNU
			echo 'install_rpath = 0' >> ./include/makeinclude/platform_macros.GNU
			echo 'include ${ACE_ROOT}/include/makeinclude/platform_macosx_mountainlion.GNU' >> ./include/makeinclude/platform_macros.GNU
			echo 'INSTALL_PREFIX = '$prefix >> ./include/makeinclude/platform_macros.GNU
			break ;;
		[4]* ) 
			echo '#include "ace/config-macosx-'$osx'.h"' > ./ace/config.h
			echo 'debug = 0' > ./include/makeinclude/platform_macros.GNU
			echo 'shared_libs = 1' >> ./include/makeinclude/platform_macros.GNU
			echo 'static_libs = 0' >> ./include/makeinclude/platform_macros.GNU
			echo 'install_rpath = 0' >> ./include/makeinclude/platform_macros.GNU
			echo 'include ${ACE_ROOT}/include/makeinclude/platform_macosx_'$osx'.GNU' >> ./include/makeinclude/platform_macros.GNU
			echo 'INSTALL_PREFIX = '$prefix >> ./include/makeinclude/platform_macros.GNU
			break ;;
		[Qq]* ) echo "OK. Bye!"
				exit ;;
		* ) ;;
		esac
	done
echo
echo -ne $COL_BLUE'[ACEtool] '$COL_RESET'Building ACE ...'
	if
		cd ace
		make -j $(sysctl -n hw.ncpu) > /dev/null 2>/tmp/TDBtool_errorMSG
	then
		echo -e $COL_GREEN' OK'$COL_RESET
		
		if
		! sudo () { ( unset LD_LIBRARY_PATH DYLD_LIBRARY_PATH; exec command sudo $* ) }
		then
			exit 1
		fi
		
		echo -ne $COL_BLUE'[ACEtool] '$COL_RESET'Installing ACE ...'
		if
			sudo ACE_ROOT=$ACE_ROOT make install > /dev/null 2>/tmp/TDBtool_errorMSG
			sudo install_name_tool -id $prefix/lib/libACE_Compression.dylib $prefix/lib/libACE_Compression.dylib > /dev/null 2>/tmp/TDBtool_errorMSG
			sudo install_name_tool -id $prefix/lib/libACE_ETCL_Parser.dylib $prefix/lib/libACE_ETCL_Parser.dylib > /dev/null 2>/tmp/TDBtool_errorMSG
			sudo install_name_tool -id $prefix/lib/libACE_ETCL.dylib $prefix/lib/libACE_ETCL.dylib > /dev/null 2>/tmp/TDBtool_errorMSG
			sudo install_name_tool -id $prefix/lib/libACE_Monitor_Control.dylib $prefix/lib/libACE_Monitor_Control.dylib > /dev/null 2>/tmp/TDBtool_errorMSG
			sudo install_name_tool -id $prefix/lib/libACE_RLECompression.dylib $prefix/lib/libACE_RLECompression.dylib > /dev/null 2>/tmp/TDBtool_errorMSG
			sudo install_name_tool -id $prefix/lib/libACE_SSL.dylib $prefix/lib/libACE_SSL.dylib > /dev/null 2>/tmp/TDBtool_errorMSG
			sudo install_name_tool -id $prefix/lib/libACE.dylib $prefix/lib/libACE.dylib > /dev/null 2>/tmp/TDBtool_errorMSG
		then
			echo -e $COL_GREEN' OK'$COL_RESET
					echo -ne $COL_BLUE'[ACEtool] '$COL_RESET'Patching ACE ...'
					if
						cat $prefix/include/ace/config-macosx-leopard.h | sed -n '/if defined(__APPLE_CC__) && (__APPLE_CC__ < 1173)/!p' | sed -n '/Compiler must be upgraded/!p' | sed -n '/ __APPLE_CC__ /!p' > /tmp/config-macosx-leopard.h
						sudo cp /tmp/config-macosx-leopard.h $prefix/include/ace/config-macosx-leopard.h
					then
						echo -e $COL_GREEN' OK'$COL_RESET
					else
						echo -e $COL_RED' error'$COL_RESET
						echo -e $COL_RED'    error '$COL_WHITE$(/bin/cat /tmp/TDBtool_errorMSG)$COL_RESET					
					fi
		else
			echo -e $COL_RED' error'$COL_RESET
			echo -e $COL_RED'    error '$COL_WHITE$(/bin/cat /tmp/TDBtool_errorMSG)$COL_RESET
		fi
	else
		echo -e $COL_RED' error'$COL_RESET
		echo -e $COL_RED'    error '$COL_WHITE$(/bin/cat /tmp/TDBtool_errorMSG)$COL_RESET
	fi